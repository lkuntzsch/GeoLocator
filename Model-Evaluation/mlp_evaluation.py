import matplotlib.pyplot as plt
import pandas as pd

# ==== Training Logs (aus den Logs extrahiert) ====
# Epochen, Train-Loss, Val-Loss, Train-Acc, Val-Acc f√ºr beide Modelle

baseline_epochs = list(range(1, 35))
baseline_train_loss = [1.5235,1.3367,1.2764,1.2439,1.2213,1.2067,1.1959,1.1865,1.1788,1.1733,1.1690,1.1640,1.1593,1.1557,1.1520,1.1495,1.1455,1.1433,1.1415,1.1378,1.1365,1.1334,1.1315,1.1287,1.1261,1.1241,1.1206,1.1184,1.1170,1.1158,1.1110,1.1103,1.1074,1.1057]
baseline_val_loss   = [1.2309,1.1479,1.1064,1.0795,1.0598,1.0465,1.0371,1.0292,1.0183,1.0161,1.0130,1.0113,1.0053,0.9997,1.0002,0.9962,0.9891,0.9894,0.9833,0.9844,0.9827,0.9770,0.9752,0.9765,0.9745,0.9700,0.9658,0.9641,0.9638,0.9637,0.9599,0.9556,0.9570,0.9561]
baseline_train_acc  = [0.5140,0.5674,0.5860,0.5960,0.6024,0.6070,0.6101,0.6127,0.6152,0.6169,0.6183,0.6202,0.6213,0.6229,0.6236,0.6244,0.6254,0.6258,0.6266,0.6279,0.6285,0.6292,0.6299,0.6304,0.6315,0.6320,0.6332,0.6339,0.6339,0.6349,0.6358,0.6359,0.6368,0.6378]
baseline_val_acc    = [0.5990,0.6239,0.6356,0.6440,0.6526,0.6565,0.6577,0.6631,0.6643,0.6650,0.6667,0.6695,0.6689,0.6706,0.6706,0.6725,0.6736,0.6749,0.6753,0.6757,0.6751,0.6766,0.6770,0.6790,0.6776,0.6783,0.6830,0.6819,0.6828,0.6815,0.6829,0.6853,0.6830,0.6854]


tuned_epochs = list(range(1, 101))
tuned_train_loss = [1.3914,1.2237,1.1796,1.1583,1.1460,1.1368,1.1314,1.1268,1.1236,1.1201,1.1176,1.1145,1.1124,1.1091,1.1071,1.1046,1.1020,1.1002,1.0979,1.0957,1.0923,1.0899,1.0871,1.0839,1.0817,1.0782,1.0763,1.0724,1.0689,1.0654,1.0618,1.0588,1.0546,1.0520,1.0481,1.0430,1.0393,1.0348,1.0308,1.0255,1.0220,1.0170,1.0129,1.0072,1.0020,0.9973,0.9933,0.9874,0.9821,0.9765,0.9704,0.9652,0.9598,0.9530,0.9470,0.9407,0.9341,0.9283,0.9221,0.9149,0.9080,0.9018,0.8951,0.8880,0.8804,0.8738,0.8669,0.8590,0.8516,0.8444,0.8371,0.8288,0.8224,0.8147,0.8063,0.7981,0.7910,0.7837,0.7763,0.7685,0.7599,0.7528,0.7456,0.7374,0.7305,0.7240,0.7180,0.7108,0.7054,0.6995,0.6938,0.6887,0.6840,0.6800,0.6749,0.6725,0.6689,0.6667,0.6643,0.6617]
tuned_val_loss   = [1.1820,1.0994,1.0637,1.0498,1.0339,1.0247,1.0261,1.0208,1.0105,1.0131,1.0057,1.0035,1.0035,0.9961,1.0018,0.9902,0.9933,0.9884,0.9821,0.9836,0.9782,0.9787,0.9760,0.9697,0.9682,0.9666,0.9685,0.9644,0.9577,0.9511,0.9520,0.9536,0.9420,0.9430,0.9360,0.9349,0.9321,0.9270,0.9239,0.9204,0.9123,0.9164,0.9099,0.9062,0.9015,0.8958,0.8923,0.8881,0.8826,0.8798,0.8741,0.8694,0.8656,0.8620,0.8557,0.8527,0.8449,0.8393,0.8387,0.8318,0.8315,0.8194,0.8197,0.8135,0.8087,0.8048,0.8004,0.7946,0.7922,0.7890,0.7805,0.7788,0.7729,0.7710,0.7640,0.7583,0.7543,0.7517,0.7463,0.7445,0.7378,0.7354,0.7334,0.7303,0.7266,0.7236,0.7215,0.7188,0.7177,0.7150,0.7126,0.7108,0.7097,0.7084,0.7067,0.7076,0.7061,0.7050,0.7048,0.7042]
tuned_train_acc  = [0.5520,0.6013,0.6151,0.6218,0.6251,0.6283,0.6301,0.6314,0.6325,0.6335,0.6347,0.6350,0.6360,0.6364,0.6372,0.6379,0.6387,0.6392,0.6395,0.6404,0.6421,0.6423,0.6434,0.6442,0.6448,0.6461,0.6464,0.6477,0.6485,0.6498,0.6508,0.6512,0.6532,0.6542,0.6550,0.6564,0.6572,0.6589,0.6602,0.6615,0.6628,0.6642,0.6655,0.6667,0.6682,0.6696,0.6712,0.6728,0.6742,0.6761,0.6776,0.6791,0.6808,0.6827,0.6844,0.6861,0.6886,0.6900,0.6920,0.6940,0.6958,0.6980,0.7000,0.7021,0.7039,0.7061,0.7083,0.7101,0.7121,0.7148,0.7165,0.7190,0.7211,0.7231,0.7256,0.7280,0.7304,0.7320,0.7340,0.7366,0.7392,0.7411,0.7433,0.7457,0.7476,0.7499,0.7515,0.7539,0.7552,0.7569,0.7584,0.7604,0.7614,0.7628,0.7645,0.7650,0.7660,0.7663,0.7675,0.7682]
tuned_val_acc    = [0.6124,0.6373,0.6494,0.6543,0.6612,0.6595,0.6611,0.6656,0.6699,0.6678,0.6701,0.6708,0.6725,0.6716,0.6684,0.6711,0.6727,0.6720,0.6757,0.6746,0.6786,0.6790,0.6799,0.6814,0.6798,0.6814,0.6844,0.6839,0.6824,0.6830,0.6837,0.6853,0.6887,0.6883,0.6923,0.6911,0.6914,0.6933,0.6927,0.6963,0.6973,0.6979,0.6994,0.6992,0.7023,0.7011,0.7050,0.7064,0.7072,0.7084,0.7096,0.7133,0.7134,0.7122,0.7150,0.7181,0.7185,0.7195,0.7201,0.7225,0.7219,0.7269,0.7283,0.7280,0.7310,0.7331,0.7328,0.7341,0.7346,0.7344,0.7389,0.7380,0.7402,0.7410,0.7447,0.7464,0.7464,0.7465,0.7487,0.7489,0.7527,0.7534,0.7537,0.7545,0.7556,0.7575,0.7563,0.7590,0.7589,0.7608,0.7620,0.7614,0.7616,0.7622,0.7635,0.7627,0.7624,0.7631,0.7630,0.7640]

# === PLOTS ===
plt.style.use('seaborn-v0_8-colorblind')  # or try 'ggplot', 'seaborn-dark', etc.

# Custom color palette
colors = {
    'Baseline Train Loss': "#1e34dc",
    'Baseline Val Loss': "#fdd210",
    'Tuned Train Loss': "#24e6e9",
    'Tuned Val Loss': "#e7610e",
    'Baseline Train Acc': '#1e34dc',
    'Baseline Val Acc': '#fdd210',
    'Tuned Train Acc': '#24e6e9',
    'Tuned Val Acc': '#e7610e'
}
"""
plt.figure(figsize=(10,5))
plt.plot(baseline_epochs, baseline_train_loss, label='Baseline Train Loss', color=colors['Baseline Train Loss'], linewidth=1.5)
plt.plot(baseline_epochs, baseline_val_loss, label='Baseline Val Loss', color=colors['Baseline Val Loss'], linewidth=1.5)
plt.plot(tuned_epochs, tuned_train_loss, label='Tuned Train Loss', color=colors['Tuned Train Loss'], linewidth=2.5)
plt.plot(tuned_epochs, tuned_val_loss, label='Tuned Val Loss', color=colors['Tuned Val Loss'], linewidth=2.5)
plt.xlabel('Epoch', fontsize=13)
plt.ylabel('Loss', fontsize=13)
plt.title('Train/Validation Loss', fontsize=15)
plt.legend(fontsize=11)
plt.grid(True, linestyle='--', alpha=0.6)
plt.tight_layout()
plt.show()

plt.figure(figsize=(10,5))
plt.plot(baseline_epochs, baseline_train_acc, label='Baseline Train Acc', color=colors['Baseline Train Acc'], linewidth=1.5)
plt.plot(baseline_epochs, baseline_val_acc, label='Baseline Val Acc', color=colors['Baseline Val Acc'], linewidth=1.5)
plt.plot(tuned_epochs, tuned_train_acc, label='Tuned Train Acc', color=colors['Tuned Train Acc'], linewidth=2.5)
plt.plot(tuned_epochs, tuned_val_acc, label='Tuned Val Acc', color=colors['Tuned Val Acc'], linewidth=2.5)
plt.xlabel('Epoch', fontsize=13)
plt.ylabel('Accuracy', fontsize=13)
plt.title('Train/Validation Accuracy', fontsize=15)
plt.legend(fontsize=11)
plt.grid(True, linestyle='--', alpha=0.6)
plt.tight_layout()
plt.show()
"""
# === KEY METRICS ===
metrics = pd.DataFrame({
    'Model': ['Baseline', 'Tuned'],
    'Test Loss': [0.9615, 0.7050],
    'Test Accuracy': [0.6823, 0.7643],
    'Top-5 Accuracy': [0.9326, 0.9563],
    'Macro F1': [0.69, 0.77],
    'Weighted F1': [0.68, 0.76]
})
#print(metrics)

# Optional: Balkendiagramm der Verbesserung
improvement = metrics.iloc[1,1:] - metrics.iloc[0,1:]
improvement.plot(kind='bar', color='skyblue', figsize=(8,4), title='Verbesserung Tuned vs Baseline')
plt.ylabel('Difference')
plt.xticks(rotation=20, ha='right', fontsize=8)
plt.show()